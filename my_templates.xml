<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_insert_update_delete">public int dml명령(${cursor} vo) {&#13;
		// TODO Auto-generated method stub&#13;
		int res = 0;&#13;
		&#13;
		Connection conn = null;&#13;
		PreparedStatement pstmt = null;&#13;
		String sql = "";&#13;
		&#13;
		try {&#13;
			//1.Connection 얻기&#13;
			conn = DBService.getInstance().getConnection();&#13;
			//2.PreparedStatement 얻기&#13;
			pstmt = conn.prepareStatement(sql);&#13;
			//3.pstmt parameter 설정&#13;
			&#13;
			&#13;
			//4.DB 처리: insert/update/delete&#13;
			res = pstmt.executeUpdate();&#13;
			&#13;
			&#13;
		} catch (Exception e) {&#13;
			// TODO: handle exception&#13;
			e.printStackTrace();&#13;
		} finally {&#13;
			&#13;
			try {&#13;
				if(pstmt!=null) pstmt.close();&#13;
				if(conn!=null) conn.close();&#13;
			} catch (SQLException e) {&#13;
				// TODO Auto-generated catch block&#13;
				e.printStackTrace();&#13;
			}&#13;
		}&#13;
				&#13;
		return res;&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_select_list">	public List&lt;${argType}&gt;  selectList(){&#13;
		&#13;
		List&lt;${argType}&gt; list = new ArrayList&lt;${argType}&gt;();&#13;
		String sql = "";&#13;
		&#13;
		Connection 			conn  = null;&#13;
		PreparedStatement 	pstmt = null;&#13;
		ResultSet			rs	  = null;&#13;
		&#13;
		try {&#13;
			//1.Connection 얻어오기&#13;
			conn = DBService.getInstance().getConnection();&#13;
			//2.PreparedStatment객체 얻어오기&#13;
			pstmt = conn.prepareStatement(sql);&#13;
			&#13;
			//3.ResultSet얻어오기&#13;
			rs = pstmt.executeQuery();&#13;
			&#13;
			//전체레코드를 vo로 포장후 ArrayList에 추가&#13;
			while(rs.next()) {&#13;
				//record를 담을 객체 생성&#13;
				${argType} vo = new ${argType}();&#13;
								&#13;
				//record-&gt;vo로 옮긴다&#13;
				&#13;
				//ArrayList추가&#13;
				list.add(vo);&#13;
			}&#13;
						&#13;
		} catch (Exception e) {&#13;
			// TODO: handle exception&#13;
			e.printStackTrace();&#13;
		} finally {&#13;
			&#13;
			try {&#13;
				if(rs!=null) rs.close();&#13;
				if(pstmt!=null) pstmt.close();&#13;
				if(conn!=null) conn.close();&#13;
			} catch (SQLException e) {&#13;
				// TODO Auto-generated catch block&#13;
				e.printStackTrace();&#13;
			}&#13;
		}&#13;
	&#13;
		return list;&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_select_one">public ${argType}  selectOne(int no){&#13;
		&#13;
		${argType} vo = null;&#13;
		String sql = "";&#13;
		&#13;
		Connection 			conn  = null;&#13;
		PreparedStatement 	pstmt = null;&#13;
		ResultSet			rs	  = null;&#13;
		&#13;
		try {&#13;
			//1.Connection 얻어오기&#13;
			conn = DBService.getInstance().getConnection();&#13;
			//2.PreparedStatment객체 얻어오기&#13;
			pstmt = conn.prepareStatement(sql);&#13;
			&#13;
			//3.ResultSet얻어오기&#13;
			rs = pstmt.executeQuery();&#13;
			&#13;
			//전체레코드를 vo로 포장후 반환&#13;
			if(rs.next()) {&#13;
				//record를 담을 객체 생성&#13;
				vo = new ${argType}();&#13;
				&#13;
				//record-&gt;vo로 옮긴다&#13;
&#13;
				&#13;
			}&#13;
						&#13;
		} catch (Exception e) {&#13;
			// TODO: handle exception&#13;
			e.printStackTrace();&#13;
		} finally {&#13;
			&#13;
			try {&#13;
				if(rs!=null) rs.close();&#13;
				if(pstmt!=null) pstmt.close();&#13;
				if(conn!=null) conn.close();&#13;
			} catch (SQLException e) {&#13;
				// TODO Auto-generated catch block&#13;
				e.printStackTrace();&#13;
			}&#13;
		}&#13;
	&#13;
		return vo;&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_singleton">	//single-ton : 객체 1개만생성해서 사용(서비스)하자&#13;
	static ${primary_type_name} single = null;&#13;
	public static ${primary_type_name} getInstance() {&#13;
&#13;
		if(single==null) single = new ${primary_type_name}();&#13;
		return single;&#13;
	}&#13;
	&#13;
	public ${primary_type_name}() {&#13;
		// TODO Auto-generated constructor stub&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_win">import javax.swing.JFrame;&#13;
&#13;
public class ${primary_type_name} extends JFrame{&#13;
&#13;
	public ${primary_type_name}() {&#13;
		// TODO Auto-generated constructor stub&#13;
		//타이틀&#13;
		super("");&#13;
		&#13;
		//위치&#13;
		super.setLocation(100, 100);&#13;
		&#13;
		//크기&#13;
		super.setSize(300, 300);&#13;
		&#13;
		//보여줘라&#13;
		super.setVisible(true);&#13;
		&#13;
		//종료&#13;
		super.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#13;
				&#13;
	}&#13;
	&#13;
	public static void main(String[] args) {&#13;
		// TODO Auto-generated method stub&#13;
        new ${primary_type_name}();  &#13;
	}&#13;
}</template></templates>